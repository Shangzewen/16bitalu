module autotest (
    input clk,  // clock
    input rst,  // reset
    output leds[3][8]
    
  ) {
  sig rest_sig; // need to rest the alu whenever it test all the testcases 
  const CLKSPEED = 26;// in order to make sure the auto test is not too fast
  dff counter[CLKSPEED](.clk(clk),.rst(rest_sig)); // create counter
  dff led[3][8](.clk(clk),.rst(rest_sig));
  dff pass_condition[1](.clk(clk),.rst(rest_sig)); // store the pass condition to the regester
 
 
  
 alu16bit alu;   
  .clk(clk){
    fsm state(.rst(rest_sig)) = {START,ADD,ADD_OVERFLOW,SUB,SUB_OVERFLOW,AND,OR,XOR,A,SHL,SHR,SRA,PASS,FAIL};
  }
    const NADD = 6b000000;
    const NSUB = 6b000001;
    const NAND = 6b011000;
    const NOR = 6b011110;
    const NXOR = 6b010110;
    const NA = 6b011010;
    const NSHL = 6b100000;
    const NSHR = 6b100001;
    const NSRA = 6b100011;
    const NUM1 = 16b011; // the number 3
    const NUM2 = 16b100; // the number 4
    
  always {
    rest_sig =  rst;
    counter.d = counter.q +1; // to increase the counter
    leds = led.q;
    leds[2][7] = 1;
    
    alu.alufn=0;
    alu.a =0;
    alu.b=0;
    case(state.q){
      
        state.START: // at the start state
          alu.alufn = 16b0;
          alu.a = 16b0;
          alu.b = 16b0;
          if (counter.q[CLKSPEED-1]){
            pass_condition.d = 1;
            state.d = state.ADD;
          }
          
        state.ADD:
          alu.alufn = NADD; // set the alufn to adder
          alu.a = NUM1;
          alu.b = NUM2;
          if(alu.out == 16b111){
          led.d[0][0] = 1; // since the answer is 7 which is true then we can set the led corresonding to this test case pass 
          }
          else{
          pass_condition.d = 0; // set the pass_condition to false
            }
          if (counter.q[CLKSPEED-1]){
            state.d = state.ADD_OVERFLOW;
          }
         state.ADD_OVERFLOW:
          alu.alufn = NADD; // set the alufn to adder
          alu.a = 16b1000000000000000;
          alu.b = 16b1000000000000000;
          if(alu.v == 1){
          led.d[0][1] = 1; // since the overflow is 1 which is true then we can set the led corresonding to this test case pass 
          }
          else{
          pass_condition.d = 0; // set the pass_condition to false
            }
          if (counter.q[CLKSPEED-1]){
            state.d = state.SUB;
          }          
        state.SUB:
          alu.alufn = NSUB;
          alu.a = NUM2;//4
          alu.b = NUM1;//3
          if(alu.out == 16b1){
          led.d[0][2] = 1; // since we have the correct answer then we can light up the led 
            }
          else{
          pass_condition.d =0;
            }
          if (counter.q[CLKSPEED-1]){
            state.d = state.SUB_OVERFLOW;
          }
        state.SUB_OVERFLOW:
          alu.alufn = NADD; // set the alufn to adder
          alu.a = 16b1011111111111111;
          alu.b = 16b0100000000000000;
          if(alu.out == 16b0111111111111111){
          led.d[0][3] = 1; // since the overflow is 1 which is true then we can set the led corresonding to this test case pass 
          }
          else{
          pass_condition.d = 0; // set the pass_condition to false
            }
          if (counter.q[CLKSPEED-1]){
            state.d = state.AND;
          }
        state.AND:
          alu.alufn = NAND;
          alu.a = 16b1;
          alu.b = 16b1;
          if(alu.out == 16b1){
          led.d[0][4] = 1;
            }
          else{
          pass_condition.d =0;
            }
          if (counter.q[CLKSPEED-1]){
            state.d = state.OR;
          }
         state.OR:
          alu.alufn = NOR;
          alu.a = 16b1010;
          alu.b = 16b1111;
          if(alu.out == 16b1111){// the or gate will only reault 0 when both a and b are 0
          led.d[0][5] = 1;
            }
          else{
          pass_condition.d =0;
            }
          if (counter.q[CLKSPEED-1]){
            state.d = state.XOR;
          }
          
         state.XOR:
          alu.alufn = NXOR;
          alu.a = 16b1010;
          alu.b = 16b1100;
          if(alu.out == 16b0110){ // will reault 0 only when a = b
          led.d[0][6] = 1;
            }
          else{
          pass_condition.d =0;
            }
          if (counter.q[CLKSPEED-1]){
            state.d = state.A;
          }
         state.A:
          alu.alufn = NA;
          alu.a = NUM1;
          alu.b = NUM2;
          if(alu.out == NUM1){
          led.d[0][7] = 1;
            }
          else{
          pass_condition.d =0;
            }
          if (counter.q[CLKSPEED-1]){
            state.d = state.SHL;
          }
         state.SHL:
          alu.alufn = NSHL;
          alu.a = 16b1010;
          alu.b = 16b11;// 3 in decimal
          if(alu.out == 16b1010000){
          led.d[1][0] = 1;
            }
          else{
          pass_condition.d =0;
            }
          if (counter.q[CLKSPEED-1]){
            state.d = state.SHR;
          }                    
         state.SHR:
          alu.alufn = NSHR;
          alu.a = 16b1010000;
          alu.b = 16b11;// 3 in decimal
          if(alu.out == 16b1010){
          led.d[1][1] = 1;
            }
          else{
          pass_condition.d =0;
            }
          if (counter.q[CLKSPEED-1]){
            state.d = state.SRA;
          }
         state.SRA:
          alu.alufn = NSRA;
          alu.a = 16b11000;
          alu.b = 16b11;// decimal 3
          if(alu.out == 16b11111){
          led.d[1][2] = 1;
            }
          else{
          pass_condition.d =0;
            }
          if (counter.q[CLKSPEED-1]){
            if(pass_condition.q==1){
            state.d = state.PASS;
              }else{
            state.d = state.FAIL;
            }
          }
        state.PASS:
          alu.a = 16b0;
          alu.b =16b0;
          alu.alufn =16b0;
           if(rest_sig==1)
            state.d = state.ADD;
        state.FAIL:
          alu.a = 16b0;
          alu.b =16b0;
          alu.alufn =16b0;
           if(rest_sig==1)
            state.d = state.ADD;  
                 
      }
      if (counter.q[CLKSPEED-1]==1){
      counter.d[CLKSPEED-1]=0;
        } 
      
        
    
      
  }
}
